// YAML Generation Engine for Bropilot Spec Documents

import { z } from 'zod';
import yaml from 'js-yaml';
// import { parse as parseCommentJson, stringify as stringifyCommentJson } from "comment-json"; // Temporarily removed, will be re-added for comment preservation

// --- Types and Interfaces ---

export interface YAMLDocument {
  [key: string]: unknown; // Use unknown instead of any
}

export interface ValidationResult {
  valid: boolean;
  errors?: string[];
}

export interface GenerationResult {
  results: Array<{
    type: string;
    status: 'success' | 'failed';
    errors?: string[];
  }>;
  timestamp: number;
}

export interface ApplicationData {
  name: string;
  purpose: string;
  current_phase: number;
  current_version: string;
}

export interface Constraint {
  description: string;
}

export interface SuccessMetric {
  description: string;
}

export interface KnowledgeGraph {
  getApplication(): Promise<ApplicationData>;
  getConstraints(): Promise<Constraint[]>;
  getSuccessMetrics(): Promise<SuccessMetric[]>;
  // Add other methods as needed for other document types
}

export interface DocumentGenerator {
  documentType: string;
  generate(knowledgeGraph: KnowledgeGraph): Promise<YAMLDocument>;
  validate(document: YAMLDocument): ValidationResult;
}

// --- Example Zod Schema ---

export const ApplicationSchema = z.object({
  application: z.object({
    name: z.string(),
    purpose: z.string(),
    current_phase: z.number().min(1).max(5),
    current_version: z.string().regex(/^\d+\.\d+\.\d+$/),
    constraints: z.array(z.string()),
    success_metrics: z.array(z.string()),
  }),
});

// --- Example Generator Implementation ---

export class ApplicationYAMLGenerator implements DocumentGenerator {
  documentType = 'application';

  async generate(kg: KnowledgeGraph): Promise<YAMLDocument> {
    const app = await kg.getApplication();
    const constraints = await kg.getConstraints();
    const metrics = await kg.getSuccessMetrics();

    return {
      application: {
        name: app.name,
        purpose: app.purpose,
        current_phase: app.current_phase,
        current_version: app.current_version,
        constraints: constraints.map((c) => c.description),
        success_metrics: metrics.map((m) => m.description),
      },
    };
  }

  validate(document: YAMLDocument): ValidationResult {
    const result = ApplicationSchema.safeParse(document);
    if (result.success) {
      return { valid: true };
    } else {
      return {
        valid: false,
        errors: result.error.errors.map((e) => e.message),
      };
    }
  }
}

// --- YAML Generation Engine ---

export class YAMLGenerationEngine {
  private generators: Map<string, DocumentGenerator>;

  constructor(generators: DocumentGenerator[]) {
    this.generators = new Map(generators.map((g) => [g.documentType, g]));
  }

  async generateAll(kg: KnowledgeGraph): Promise<GenerationResult> {
    const results: GenerationResult['results'] = [];

    for (const [type, generator] of this.generators) {
      const doc = await generator.generate(kg);
      const validation = generator.validate(doc);

      if (validation.valid) {
        // Placeholder: writeDocument(type, doc) to be implemented
        results.push({ type, status: 'success' });
      } else {
        results.push({ type, status: 'failed', errors: validation.errors });
      }
    }

    return { results, timestamp: Date.now() };
  }

  /**
   * Serialize and write a YAML document with metadata comments.
   * If dryRun is true, returns the YAML string instead of writing.
   */
  async writeDocument(
    type: string,
    doc: YAMLDocument,
    options?: {
      dryRun?: boolean;
      version?: string;
      source?: string;
      outPath?: string;
    },
  ): Promise<string | void> {
    const version = options?.version ?? 'Bropilot v1.0.0';
    const timestamp = new Date().toISOString();
    const source = options?.source ?? 'Knowledge Graph v3';

    // Metadata comments
    const comments = [
      `# Generated by ${version}`,
      `# Generated at: ${timestamp}`,
      `# Source: ${source}`,
      '',
    ].join('\n');

    // YAML serialization (js-yaml)
    const yamlBody = yaml.dump(doc, {
      lineWidth: 120,
      noRefs: false, // allow anchors
      sortKeys: true, // for deterministic output
    });

    const output = `${comments}${yamlBody}`;

    if (options?.dryRun) {
      return output;
    }

    // If outPath is provided, write to file (Node.js fs/promises)
    if (options?.outPath) {
      const fs = await import('fs/promises');
      await fs.writeFile(options.outPath, output, 'utf8');
    }
    // Otherwise, just return void (could be extended to default paths)
  }
}
