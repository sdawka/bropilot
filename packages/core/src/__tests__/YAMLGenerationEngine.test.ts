import {
  ApplicationYAMLGenerator,
  YAMLGenerationEngine,
  ApplicationSchema,
  KnowledgeGraph,
} from '../yamlgen';
import yaml from 'js-yaml';

describe('YAMLGenerationEngine', () => {
  // Mock KnowledgeGraph
  const mockKG: KnowledgeGraph = {
    async getApplication() {
      return {
        name: 'MyApp',
        purpose: 'Enable users to track personal fitness goals',
        current_phase: 2,
        current_version: '0.1.0',
      };
    },
    async getConstraints() {
      return [
        { description: 'Must work offline' },
        { description: 'Data must be encrypted' },
      ];
    },
    async getSuccessMetrics() {
      return [
        { description: '90% user retention after 30 days' },
        { description: 'Average session time > 5 minutes' },
      ];
    },
  };

  it('generates valid application.yaml with metadata comments', async () => {
    const generator = new ApplicationYAMLGenerator();
    const engine = new YAMLGenerationEngine([generator]);
    const doc = await generator.generate(mockKG);

    // Validate against schema
    const validation = generator.validate(doc);
    expect(validation.valid).toBe(true);

    // Serialize with metadata (dry run)
    const yamlStr = await engine.writeDocument('application', doc, {
      dryRun: true,
      version: 'Bropilot v1.0.0',
      source: 'Knowledge Graph v3',
    });
    expect(typeof yamlStr).toBe('string');

    // Check metadata comments
    expect(yamlStr).toMatch(/# Generated by Bropilot v1\.0\.0/);
    expect(yamlStr).toMatch(/# Generated at:/);
    expect(yamlStr).toMatch(/# Source: Knowledge Graph v3/);

    // Parse YAML (ignore comments)
    const parsed = yaml.load(yamlStr!.replace(/^#.*\n/gm, ''));
    expect(ApplicationSchema.safeParse(parsed).success).toBe(true);

    // Deterministic output: running again should yield the same YAML (except timestamp)
    const yamlStr2 = await engine.writeDocument('application', doc, {
      dryRun: true,
      version: 'Bropilot v1.0.0',
      source: 'Knowledge Graph v3',
    });
    // Remove timestamps for comparison
    const stripTimestamp = (s: string) =>
      s.replace(/# Generated at: .*\n/, '# Generated at: <timestamp>\n');
    expect(stripTimestamp(yamlStr!)).toBe(stripTimestamp(yamlStr2 as string));
  });
});
